type: edu
files:
- name: src/tictactoe/Main.java
  visible: true
  text: |
    package tictactoe;

    public class Main {
        public static void main(String[] args) {
            // write your code here
        }
    }
  learner_created: false
- name: test/TicTacToeTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.List;


    public class TicTacToeTest extends StageTest<String> {

        int[] easyAiMoves = new int[9];

        @DynamicTest(order = 0)
        CheckResult testBadParameters() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("start");
            if (!output.toLowerCase().contains("bad parameters")) {
                return CheckResult.wrong("After entering start command with wrong parameters you should print 'Bad parameters!' and ask to enter a command again!");
            }

            output = program.execute("start easy");
            if (!output.toLowerCase().contains("bad parameters")) {
                return CheckResult.wrong("After entering start command with wrong parameters you should print 'Bad parameters!' and ask to enter a command again!");
            }

            program.execute("exit");

            if (!program.isFinished()) {
                return CheckResult.wrong("After entering 'exit' command you should stop the program!");
            }

            return CheckResult.correct();
        }


        @DynamicTest(order = 1)
        CheckResult testGridOutput() {

            TestedProgram program = new TestedProgram();

            program.start();

            String output = program.execute("start user easy");

            Grid printedGrid = Grid.fromOutput(output);
            Grid emptyGrid = Grid.fromLine("_________");

            if (!printedGrid.equals(emptyGrid)) {
                return CheckResult.wrong("After starting the program you should print an empty grid!\n" +
                    "Correct empty grid:\n" + emptyGrid);
            }

            if (!output.toLowerCase().contains("enter the coordinates:")) {
                return CheckResult.wrong("After printing an empty grid you should ask to enter cell coordinates!");
            }

            output = program.execute("2 2");

            Grid gridAfterMove = Grid.fromOutput(output);
            Grid correctGridAfterMove = Grid.fromLine("____X____");

            if (!gridAfterMove.equals(correctGridAfterMove)) {
                return CheckResult.wrong("After making the move wrong grid was printed.\n" +
                    "Your grid:\n" + gridAfterMove + "\n" +
                    "Correct grid:\n" + correctGridAfterMove);
            }

            if (!output.toLowerCase().replace("'", "\"").contains("making move level \"easy\"")) {
                return CheckResult.wrong("After entering a cell coordinates you should print:\nMaking move level \"easy\"");
            }

            Grid gridAfterAiMove = Grid.fromOutput(output, 2);

            if (gridAfterAiMove.equals(gridAfterMove)) {
                return CheckResult.wrong("After AI move grid wasn't changed!");
            }

            Grid gameGrid = gridAfterAiMove;

            while (true) {
                if (gameGrid.getGameState() != GameState.NOT_FINISHED) {
                    switch (gameGrid.getGameState()) {
                        case X_WIN:
                            if (!output.contains("X wins")) {
                                return CheckResult.wrong("You should print 'X wins' if X win the game");
                            }
                            break;
                        case O_WIN:
                            if (!output.contains("O wins")) {
                                return CheckResult.wrong("You should print 'O wins' if O win the game");
                            }
                            break;
                        case DRAW:
                            if (!output.contains("Draw")) {
                                return CheckResult.wrong("You should print 'Draw' if the game ends with draw!");
                            }
                            break;
                    }
                    break;
                }
                Position nextMove = Minimax.getMove(gameGrid, CellState.X);

                Grid tempGrid = gameGrid.copy();
                tempGrid.setCell(nextMove.x, nextMove.y, CellState.X);

                output = program.execute((nextMove.x + 1) + " " + (nextMove.y + 1));

                gameGrid = Grid.fromOutput(output);

                if (!gameGrid.equals(tempGrid)) {
                    return CheckResult.wrong("After making move (" + nextMove + ") the game grid is wrong!\n" +
                        "Your gird\n" + gameGrid + "\n" +
                        "Correct grid\n" + tempGrid);
                }

                if (gameGrid.getGameState() != GameState.NOT_FINISHED)
                    continue;

                gameGrid = Grid.fromOutput(output, 2);
            }

            return CheckResult.correct();
        }

        @DynamicTest(repeat = 100, order = 2)
        CheckResult checkEasyAi() {
            TestedProgram program = new TestedProgram();
            program.start();

            program.execute("start user easy");

            String output = program.execute("2 2");

            Grid gridAfterAiMove = Grid.fromOutput(output, 2);

            CellState[][] array = gridAfterAiMove.getGrid();

            for (int i = 0; i < 9; i++) {
                if (i == 4) {
                    continue;
                }
                if (array[i / 3][i % 3] == CellState.O) {
                    easyAiMoves[i]++;
                }
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 3)
        CheckResult checkRandom() {
            double averageScore = 0;

            for (int i = 0; i < easyAiMoves.length; i++) {
                averageScore += (i + 1) * easyAiMoves[i];
            }

            averageScore /= 8;

            double expectedValue = (double) (1 + 2 + 3 + 4 + 6 + 7 + 8 + 9) * 100 / 8 / 8;

            if (Math.abs(averageScore - expectedValue) > 20) {
                return CheckResult.wrong("Looks like your Easy level AI doesn't make a random move!");
            }

            return CheckResult.correct();
        }

        boolean isEasyNotMovingLikeMedium = false;

        @DynamicTest(repeat = 30, order = 4)
        CheckResult checkEasyNotMovingLikeMedium() {

            if (isEasyNotMovingLikeMedium) {
                return CheckResult.correct();
            }

            TestedProgram program = new TestedProgram();
            program.start();
            program.execute("start user easy");

            String output = program.execute("2 2");

            Grid gameGrid = Grid.fromOutput(output, 2);

            CellState[][] cellStates = gameGrid.getGrid();

            if (cellStates[0][0] == CellState.EMPTY && cellStates[2][2] == CellState.EMPTY) {
                output = program.execute("1 1");
                gameGrid = Grid.fromOutput(output, 2);
                if (gameGrid.getGrid()[2][2] == CellState.EMPTY) {
                    isEasyNotMovingLikeMedium = true;
                }
            } else {
                output = program.execute("1 3");
                gameGrid = Grid.fromOutput(output, 2);
                if (gameGrid.getGrid()[2][0] == CellState.EMPTY) {
                    isEasyNotMovingLikeMedium = true;
                }
            }

            program.stop();
            return CheckResult.correct();
        }

        @DynamicTest(order = 5)
        CheckResult checkEasyNotMovingLikeMediumAfter() {
            if (!isEasyNotMovingLikeMedium) {
                return CheckResult.wrong("Looks like your Easy level AI doesn't make a random move!");
            }
            return CheckResult.correct();
        }


        @DynamicTest(order = 6)
        CheckResult checkEasyVsEasy() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("start easy easy");

            List<Grid> gridList = Grid.allGridsFromOutput(output);

            Grid.checkGridSequence(gridList);

            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/tictactoe/play/TicTacToe.java
  visible: true
  text: "package tictactoe;\n\nimport java.util.Arrays;\nimport java.util.Random;\n\
    import java.util.Scanner;\n\npublic class TicTacToe {\n\tpublic static void start()\
    \ {\n\t\tScanner scanner = new Scanner(System.in);\n\t\tRandom random = new Random();\n\
    \t\tchar[][] TicTacToeCell = new char[3][3];\n\n\t\tfor (char[] chars: TicTacToeCell)\
    \ {\n\t\t\tArrays.fill(chars, ' ');\n\t\t}\n\n\t\tprintTable(TicTacToeCell);\n\
    \n\t\tdo {\n\t\t\tint XCoordinate;\n\t\t\tint YCoordinate;\n\t\t\t// user play\n\
    \t\t\twhile (true) {\n\t\t\t\ttry {\n\t\t\t\t\tSystem.out.print(\"Enter the coordinates:\
    \ \");\n\t\t\t\t\tString coordinates = scanner.nextLine();\n\t\t\t\t\tXCoordinate\
    \ = Integer.parseInt(coordinates.split(\" \")[0]);\n\t\t\t\t\tYCoordinate = Integer.parseInt(coordinates.split(\"\
    \ \")[1]);\n\n\t\t\t\t\tif (checkRange(XCoordinate, YCoordinate)) {\n\t\t\t\t\t\
    \tXCoordinate -= 1;\n\t\t\t\t\t\tYCoordinate -= 1;\n\n\t\t\t\t\t\tif (TicTacToeCell[XCoordinate][YCoordinate]\
    \ != ' ') {\n\t\t\t\t\t\t\tSystem.out.println(\"This cell is occupied! Choose\
    \ another one!\");\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tTicTacToeCell[XCoordinate][YCoordinate]\
    \ = 'X';\n\t\t\t\t\t\t\tprintTable(TicTacToeCell);\n\t\t\t\t\t\t\tbreak;\n\t\t\
    \t\t\t\t}\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\tSystem.out.println(\"Coordinates\
    \ should be from 1 to 3!\");\n\t\t\t\t\t}\n\t\t\t\t} catch (NumberFormatException\
    \ nfe) {\n\t\t\t\t\tSystem.out.println(\"You should enter numbers!\");\n\t\t\t\
    \t} catch (ArrayIndexOutOfBoundsException aioobe) {\n\t\t\t\t\tSystem.out.println(\"\
    Please give two numbers!\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (isDone(TicTacToeCell))\
    \ {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tSystem.out.println(\"Making move level\
    \ \\\"easy\\\"\");\n\t\t\tdo {\n\t\t\t\tXCoordinate = random.nextInt(3);\n\t\t\
    \t\tYCoordinate = random.nextInt(3);\n\t\t\t} while (TicTacToeCell[XCoordinate][YCoordinate]\
    \ != ' ');\n\t\t\tTicTacToeCell[XCoordinate][YCoordinate] = 'O';\n\t\t\tprintTable(TicTacToeCell);\n\
    \t\t} while (!isDone(TicTacToeCell));\n\t}\n\n\tprivate static void printTable(char[][]\
    \ TicTacToe) {\n\t\tSystem.out.println(\"---------\");\n\t\tfor (char[] firstArray:\
    \ TicTacToe) {\n\t\t\tSystem.out.print(\"|\");\n\t\t\tfor (char secondArray: firstArray)\
    \ {\n\t\t\t\tSystem.out.print(\" \" + secondArray);\n\t\t\t}\n\t\t\tSystem.out.println(\"\
    \ |\");\n\t\t}\n\t\tSystem.out.println(\"---------\");\n\t}\n\n\tprivate static\
    \ boolean checkRange(int x, int y) {\n\t\treturn (1 <= x && x <= 3) && (1 <= y\
    \ && y <= 3);\n\t}\n\n\tprivate static boolean turn(char[][] TicTacToe) {\n\t\t\
    int counter = 0;\n\n\t\tfor (char[] x: TicTacToe) {\n\t\t\tfor (char y: x) {\n\
    \t\t\t\tif (y == 'X' || y == 'O') {\n\t\t\t\t\tcounter++;\n\t\t\t\t}\n\t\t\t}\n\
    \t\t}\n\n\t\treturn counter % 2 == 0;\n\t}\n\n\tprivate static boolean isDone(char[][]\
    \ TicTacToe) {\n\t\tString player = turn(TicTacToe) ? \"O\": \"X\";\n\n\t\t//\
    \ Checking horizontal and vertical\n\t\tfor (int i = 0; i < TicTacToe.length;\
    \ i++) {\n\t\t\tif (TicTacToe[i][0] != ' ') {\n\t\t\t\tif (TicTacToe[i][0] ==\
    \ TicTacToe[i][1] && TicTacToe[i][0] == TicTacToe[i][2]) {\n\t\t\t\t\tSystem.out.printf(\"\
    %s wins\\n\", player);\n\t\t\t\t\treturn true;\n\t\t\t\t} else if (TicTacToe[0][i]\
    \ == TicTacToe[1][i] && TicTacToe[0][i] == TicTacToe[2][i] && TicTacToe[0][i]\
    \ != ' ') {\n\t\t\t\t\tSystem.out.printf(\"%s wins\\n\", player);\n\t\t\t\t\t\
    return true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Checking diagonal\n\t\tif (TicTacToe[0][0]\
    \ == TicTacToe[1][1] && TicTacToe[0][0] == TicTacToe[2][2] && TicTacToe[0][0]\
    \ != ' ') {\n\t\t\tSystem.out.printf(\"%s wins\\n\", player);\n\t\t\treturn true;\n\
    \t\t}\n\n\t\tif (TicTacToe[0][2] == TicTacToe[1][1] && TicTacToe[0][2] == TicTacToe[2][0]\
    \ && TicTacToe[0][2] != ' ') {\n\t\t\tSystem.out.printf(\"%s wins\\n\", player);\n\
    \t\t\treturn true;\n\t\t}\n\n\t\t// Checking whether the game is a draw or not\
    \ finished\n\t\tint counter = 0;\n\t\tfor (char[] x: TicTacToe) {\n\t\t\tfor (char\
    \ y: x) {\n\t\t\t\tif (y != ' ') {\n\t\t\t\t\tcounter++;\n\t\t\t\t}\n\t\t\t}\n\
    \t\t}\n\n\t\tif (counter == 9) {\n\t\t\tSystem.out.println(\"Draw\");\n\t\t\t\
    return true;\n\t\t}\n\n\t\treturn false;\n\t}\n}\n"
  learner_created: true
- name: src/tictactoe/play/GameStatus.java
  visible: true
  learner_created: true
- name: src/tictactoe/play/EasyMode.java
  visible: true
  learner_created: true
- name: src/tictactoe/play/Mode.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/7436#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Tue, 27 Jun 2023 07:07:00 UTC"
record: 3
